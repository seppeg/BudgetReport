version: '2'

services:
  #kafka/zookeeper for storing events
  zookeeper:
    image: wurstmeister/zookeeper:3.4.6
    volumes:
      - zookeeper_data:/opt/zookeeper-3.4.6/data
    networks:
      - backend
    ports:
      - "2181:2181"
  kafka:
    image: wurstmeister/kafka:1.0.0
    networks:
      - backend
    depends_on:
     - zookeeper
    environment:
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9092
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
    env_file:
      - kafka.env

  #ELK stack
  logstash:
    image: budgetreport/logstash:v1
    container_name: logstash
    ports:
     - "5000:5000"
    networks:
     - backend

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.2
    container_name: elasticsearch
    environment:
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    mem_limit: 2g
    cap_add:
      - IPC_LOCK
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - backend
    labels:
      - "traefik.frontend.rule=Host:es.localhost"

  kibana:
    image: docker.elastic.co/kibana/kibana:6.2.2
    container_name: kibana
    environment:
     - ELASTICSEARCH_URL=http://elasticsearch:9200
    ports:
     - "5601:5601"
    networks:
      - backend
    labels:
      - "traefik.frontend.rule=Host:kibana.localhost"

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    # Environment settings are defined here https://github.com/openzipkin/zipkin/tree/1.19.0/zipkin-server#environment-variables
    environment:
      - STORAGE_TYPE=elasticsearch
      # Point the zipkin at the storage backend
      - ES_HOSTS=elasticsearch
      # Uncomment to enable scribe
      # - SCRIBE_ENABLED=true
      # Uncomment to enable self-tracing
      # - SELF_TRACING_ENABLED=true
      # Uncomment to enable debug logging
      # - JAVA_OPTS=-Dlogging.level.zipkin=DEBUG -Dlogging.level.zipkin2=DEBUG
    ports:
      # Port used for the Zipkin UI and HTTP Api
      - 9411:9411
      # Uncomment if you set SCRIBE_ENABLED=true
      # - 9410:9410
    depends_on:
     - elasticsearch
    networks:
      - backend
    labels:
      - "traefik.frontend.rule=Host:zipkin.localhost"

  dependencies:
    image: openzipkin/zipkin-dependencies
    container_name: dependencies
    entrypoint: crond -f
    environment:
      - STORAGE_TYPE=elasticsearch
      - ES_HOSTS=elasticsearch
      # Uncomment to see dependency processing logs
      # - ZIPKIN_LOG_LEVEL=DEBUG
      # Uncomment to adjust memory used by the dependencies job
      # - JAVA_OPTS=-verbose:gc -Xms1G -Xmx1G
    depends_on:
     - elasticsearch
    networks:
      - backend

  #databases
  bookingdb:
    build: postgresql
    networks:
     - booking_backend
    ports:
     - "5444:5432"
    env_file:
      - booking/credentials.env
    environment:
      - POSTGRES_DB=bookingdb
      - PGDATA=/var/lib/postgresql/data
    volumes:
      - booking_data:/var/lib/postgresql/data

  projectdb:
      build: postgresql
      networks:
       - project_backend
      ports:
       - "5445:5432"
      env_file:
        - project/credentials.env
      environment:
        - POSTGRES_DB=projectdb
        - PGDATA=/var/lib/postgresql/data
      volumes:
        - project_data:/var/lib/postgresql/data

  #reverse proxy & load balancer
  traefik:
    image: traefik
    command: --api --docker --docker.domain=localhost --logLevel="DEBUG" --accesslogsfile=/dev/stdout --tracing.backend=zipkin --tracing.zipkin.httpEndpoint="http://zipkin:9411/api/v1/spans"
    networks:
      - backend
      - frontend
    ports:
     - "80:80"
     - "443:443"
     - "8080:8080" # web ui
    env_file:
      - .env
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock

  angular:
    build: budget-report-ui
    networks:
      - frontend
    labels:
     - "traefik.backend=website"
     - "traefik.frontend.rule=HostRegexp:{catchall:.*}"
     - "traefik.frontend.priority=1"

  #microservices
  camis:
    build: camis-connection
    container_name: camis
    networks:
     - backend
    env_file:
      - camis-connection/credentials.env
    environment:
      SPRING_DATASOURCE_URL: jdbc:sqlserver://camis-prd-sql;database=Camis_mdb
      BOOKING_URL: http://booking:8081
      ZOOKEEPER_HOST: zookeeper:2181
      ZIPKIN_URL: http://zipkin:9411
    labels:
     - "traefik.backend=camis"
     - "traefik.frontend.rule=Host:camis.localhost"

  booking:
    build: booking
    container_name: booking
    networks:
     - backend
     - booking_backend
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
      SPRING_DATASOURCE_URL: jdbc:postgresql://bookingdb:5432/bookingdb
      ZIPKIN_URL: http://zipkin:9411
    env_file:
     - booking/credentials.env
    labels:
     - "traefik.backend=booking"
     - "traefik.frontend.rule=Host:booking.localhost"

  project:
    build: project
    container_name: project
    networks:
      - backend
      - project_backend
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: kafka:9092
      SPRING_DATASOURCE_URL: jdbc:postgresql://projectdb:5432/projectdb
      ZOOKEEPER_HOST: zookeeper:2181
      ZIPKIN_URL: http://zipkin:9411
    env_file:
     - project/credentials.env
    labels:
     - "traefik.backend=project"
     - "traefik.frontend.rule=Host:project.localhost"

volumes:
  booking_data:
  project_data:
  zookeeper_data:
  esdata1:

networks:
  frontend:
  backend:
  booking_backend:
  project_backend: